# This file adds Queries using pgnodemx

cpo_pgnodemx_network:
  query: "SELECT interface,tx_bytes,tx_packets, rx_bytes,rx_packets from exporter.proc_network_stats()"
  metrics:
    - interface:
        usage: "LABEL"
    - tx_bytes:
        usage: "GAUGE"
        description: "Number of bytes transmitted"
    - tx_packets:
        usage: "GAUGE"
        description: "Number of packets transmitted"
    - rx_bytes:
        usage: "GAUGE"
        description: "Number of bytes received"
    - rx_packets:
        usage: "GAUGE"
        description: "Number of packets received"

cpo_pgnodemx_process:
  query: "SELECT exporter.cgroup_process_count() as count"
  metrics:
    - count:
        usage: "GAUGE"
        description: "Total number of database processes"


cpo_pgnodemx_mem:
  query: "
WITH d AS (
  SELECT key, val 
  FROM exporter.cgroup_setof_kv('memory.stat')
),
limits AS (
  SELECT 
    CASE
      WHEN exporter.cgroup_mode() = 'legacy' AND exporter.cgroup_scalar_bigint('memory.limit_in_bytes') = 9223372036854771712 THEN 0
      WHEN exporter.cgroup_mode() = 'legacy' THEN exporter.cgroup_scalar_bigint('memory.limit_in_bytes')
      WHEN exporter.cgroup_scalar_bigint('memory.max') = 9223372036854775807 THEN 0
      ELSE exporter.cgroup_scalar_bigint('memory.max')
    END AS limit,
    exporter.cgroup_mode() AS mode
),
values AS (
  SELECT
    (SELECT val FROM d WHERE key = 'cache') AS cache,
    (SELECT val FROM d WHERE key = 'rss') AS rss,
    (SELECT val FROM d WHERE key = 'shmem') AS shmem,
    (SELECT val FROM d WHERE key = 'mapped_file') AS mapped_file,
    (SELECT val FROM d WHERE key = 'dirty') AS dirty_legacy,
    (SELECT val FROM d WHERE key = 'file_dirty') AS dirty,
    (SELECT val FROM d WHERE key = 'active_anon') AS active_anon,
    (SELECT val FROM d WHERE key = 'inactive_anon') AS inactive_anon,
    (SELECT val FROM d WHERE key = 'active_file') AS active_file,
    (SELECT val FROM d WHERE key = 'inactive_file') AS inactive_file
)
SELECT
  exporter.kdapi_scalar_bigint('mem_request') AS request,
  limits.limit,
  CASE WHEN limits.mode = 'legacy' THEN values.cache ELSE 0 END AS cache,
  CASE WHEN limits.mode = 'legacy' THEN values.rss ELSE 0 END AS rss,
  values.shmem,
  CASE WHEN limits.mode = 'legacy' THEN values.mapped_file ELSE 0 END AS mapped_file,
  CASE WHEN limits.mode = 'legacy' THEN values.dirty_legacy ELSE values.dirty END AS dirty,
  values.active_anon,
  values.inactive_anon,
  values.active_file,
  values.inactive_file,
  CASE
    WHEN limits.mode = 'legacy' THEN exporter.cgroup_scalar_bigint('memory.usage_in_bytes')
    ELSE exporter.cgroup_scalar_bigint('memory.current')
  END AS usage_in_bytes,
  CASE
    WHEN limits.mode = 'legacy' THEN exporter.cgroup_scalar_bigint('memory.kmem.usage_in_bytes')
    ELSE 0
  END AS kmem_usage_in_byte
FROM limits, values
"
  metrics:
    - request:
        usage: "GAUGE"
        description: "Memory request value in bytes"
    - limit:
        usage: "GAUGE"
        description: "Memory limit value in bytes"
    - cache:
        usage: "GAUGE"
        description: "Total bytes of page cache memory"
    - rss:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory"
    - shmem:
        usage: "GAUGE"
        description: "Total bytes of shared memory"
    - mapped_file:
        usage: "GAUGE"
        description: "Total bytes of mapped file (includes tmpfs/shmem)"
    - dirty:
        usage: "GAUGE"
        description: "Total bytes that are waiting to get written back to the disk"
    - active_anon:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory on active LRU list"
    - inactive_anon:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory on inactive LRU list"
    - active_file:
        usage: "GAUGE"
        description: "Total bytes of file-backed memory on active LRU list"
    - inactive_file:
        usage: "GAUGE"
        description: "Total bytes of file-backed memory on inactive LRU list"
    - usage_in_bytes:
        usage: "GAUGE"
        description: "Total usage in bytes"
    - kmem_usage_in_bytes:
        usage: "GAUGE"
        description: "Total kernel memory usage in bytes"


cpo_pgnodemx_cpu:
  query: "SELECT exporter.kdapi_scalar_bigint('cpu_request') as request, exporter.kdapi_scalar_bigint('cpu_limit') as limit"
  metrics:
    - request:
        usage: "GAUGE"
        description: "CPU request value in milli cores"
    - limit:
        usage: "GAUGE"
        description: "CPU limit value in milli cores"

cpo_pgnodemx_cpucfs:
  query: "WITH cgroup_mode AS (
  SELECT exporter.cgroup_mode() AS mode
),
cpu_values AS (
  SELECT
    exporter.cgroup_scalar_bigint('cpu.cfs_period_us') AS cfs_period_us,
    exporter.cgroup_scalar_bigint('cpu.cfs_quota_us') AS cfs_quota_us,
    exporter.cgroup_array_bigint('cpu.max') AS cpu_max
)
SELECT
  CASE
    WHEN cm.mode = 'legacy' THEN cv.cfs_period_us
    ELSE (cv.cpu_max)[2]
  END AS period_us,
  CASE
    WHEN cm.mode = 'legacy' THEN GREATEST(cv.cfs_quota_us, 0)
    ELSE GREATEST((cv.cpu_max)[1], 0)
  END AS quota_us
FROM cgroup_mode cm, cpu_values cv"
  metrics:
    - period_us:
        usage: "GAUGE"
        description: "the total available run-time within a period (in microseconds)"
    - quota_us:
        usage: "GAUGE"
        description: "the length of a period (in microseconds)"

cpo_pgnodemx_cpuacct:
  query: "WITH cpu_usage AS (
  SELECT
    exporter.cgroup_mode() AS mode,
    exporter.cgroup_scalar_bigint('cpuacct.usage') AS legacy_usage,
    (SELECT val FROM exporter.cgroup_setof_kv('cpu.stat') WHERE key = 'usage_usec') * 1000 AS v2_usage
)
SELECT
  CASE
    WHEN cu.mode = 'legacy' THEN cu.legacy_usage
    ELSE cu.v2_usage
  END AS usage,
  clock_timestamp() AS usage_ts
FROM cpu_usage cu"
  metrics:
    - usage:
        usage: "GAUGE"
        description: "CPU usage in nanoseconds"
    - usage_ts:
        usage: "GAUGE"
        description: "CPU usage snapshot timestamp"

cpo_pgnodemx_cpustat:
  query: "WITH d AS (
  SELECT key, val, exporter.cgroup_mode() AS mode
  FROM exporter.cgroup_setof_kv('cpu.stat')
)
SELECT
  MAX(CASE WHEN key = 'nr_periods' THEN val END) AS nr_periods,
  MAX(CASE WHEN key = 'nr_throttled' THEN val END) AS nr_throttled,
  MAX(CASE WHEN mode = 'legacy' AND key = 'throttled_usec' THEN val 
           WHEN mode = 'unified' AND key = 'throttled_usec' THEN val*1000 END) AS throttled_time_in_nanoseconds,
  clock_timestamp() AS snap_ts
FROM d
"
  metrics:
    - nr_periods:
        usage: "GAUGE"
        description: "number of periods that any thread was runnable"
    - nr_throttled:
        usage: "GAUGE"
        description: "number of runnable periods in which the application used its entire quota and was throttled"
    - throttled_time_in_nanoseconds:
        usage: "GAUGE"
        description: "sum total amount of time in nanoseconds individual threads within the exporter.cgroup were throttled"
    - snap_ts:
        usage: "GAUGE"
        description: "CPU stat snapshot timestamp"

cpo_pgnodemx_data_disk:
  query: "SELECT mount_point,fs_type,total_bytes,available_bytes,total_file_nodes,free_file_nodes
          FROM exporter.proc_mountinfo() m
          JOIN exporter.fsinfo(m.mount_point) f USING (major_number, minor_number)
          WHERE m.mount_point = '/home/postgres/pgdata'"
  metrics:
    - mount_point:
        usage: "LABEL"
        description: "mount point"
    - fs_type:
        usage: "LABEL"
        description: "File system type"
    - total_bytes:
        usage: "GAUGE"
        description: "Size in bytes"
    - available_bytes:
        usage: "GAUGE"
        description: "Available size in bytes"
    - total_file_nodes:
        usage: "GAUGE"
        description: "Total file nodes"
    - free_file_nodes:
        usage: "GAUGE"
        description: "Available file nodes"

cpo_pgnodemx_disk_activities:
  query: "SELECT mount_point,sectors_read,sectors_written
          FROM exporter.proc_mountinfo() m
          JOIN exporter.proc_diskstats() d USING (major_number, minor_number)
          WHERE m.mount_point IN ('/home/postgres/pgdata')"
  metrics:
    - mount_point:
        usage: "LABEL"
        description: "mount point"
    - sectors_read:
        usage: "GAUGE"
        description: "Total sectors read"
    - sectors_written:
        usage: "GAUGE"
        description: "Total sectors writen"