# This file adds Queries to monitor pgbackrest

cpo_pgbackrest_time_since_backup:
    query: "WITH backups AS (
                SELECT jsonb_array_elements(data) AS stanza_data
                FROM exporter.pgbackrestbackupinfo
            ),
            per_stanza AS ( 
                SELECT stanza_data->>'name' AS stanza,
                 jsonb_array_elements(stanza_data->'backup') AS backup_data,
                 CASE
                    WHEN stanza_data->'status'->>'message'='ok' THEN 1
                    ELSE 0
                 END 
                 AS message
                FROM backups
            ),
            full_bck AS (
                SELECT stanza, min(message) as message, extract(epoch from (CURRENT_TIMESTAMP - max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)))) AS time_since_full_backup_completion
                FROM per_stanza
                WHERE backup_data->>'type' = 'full'
                GROUP BY stanza
            ),
            diff_bck as (
                SELECT stanza, min(message) as message, extract(epoch from (CURRENT_TIMESTAMP - max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)))) AS time_since_diff_backup_completion
                FROM per_stanza
                WHERE backup_data->>'type' = 'diff'
                GROUP BY stanza
            ),
            incr_bck as (
                SELECT stanza, min(message) as message, extract(epoch from (CURRENT_TIMESTAMP - max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)))) AS time_since_incr_backup_completion
                FROM per_stanza
                WHERE backup_data->>'type' = 'incr'
                GROUP BY stanza
            )
            SELECT now() as last_check, a.stanza as stanza, coalesce(a.time_since_full_backup_completion, 0) time_since_full_backup_completion, coalesce(b.time_since_diff_backup_completion,0) time_since_diff_backup_completion, coalesce(c.time_since_incr_backup_completion,0) time_since_incr_backup_completion, LEAST(a.message, b.message, c.message) as status FROM full_bck a LEFT JOIN diff_bck b on a.stanza = b.stanza LEFT JOIN incr_bck c on a.stanza = c.stanza;"
    metrics:
        - last_check:
            usage: "GAUGE"
            description: "last_check"
        - stanza:
            usage: "LABEL"
            description: "Stanza"
        - time_since_full_backup_completion:
            usage: "LABEL"
            description: "Seconds since last full-backup"
        - time_since_diff_backup_completion:
            usage: "LABEL"
            description: "Seconds since last diff-backup"
        - time_since_incr_backup_completion:
            usage: "LABEL"
            description: "Seconds since last incr-backup"
        - status:
            usage: "LABEL"
            description: "Min-Status per Backup based on stanza"

cpo_pgbackrest_duration_backup:
    query: "WITH backups AS (
                SELECT jsonb_array_elements(data) AS stanza_data
                FROM exporter.pgbackrestbackupinfo
            )
            , per_stanza AS ( 
                SELECT stanza_data->>'name' AS stanza,
                jsonb_array_elements(stanza_data->'backup') AS backup_data
                FROM backups
            )
                SELECT stanza,
                extract(epoch from (max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)))) AS stop,
                extract(epoch from (max(to_timestamp((backup_data->'timestamp'->>'start')::bigint)))) AS start,
                extract(epoch from (max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)) - max(to_timestamp((backup_data->'timestamp'->>'start')::bigint)))) AS duration,
                backup_data->>'type' as type
                FROM per_stanza
                WHERE backup_data->>'type' IN ('full', 'diff', 'incr')
                GROUP BY stanza, type;"
    metrics:
        - stanza:
            usage: "LABEL"
            description: "Stanza"
        - stop:
            usage: "LABEL"
            description: "Stoptime as Timestamp"
        - start:
            usage: "LABEL"
            description: "Starttime as Timestamp"
        - duration:
            usage: "GAUGE"
            description: "Duration of the Backup"
        - type:
            usage: "LABEL"
            description: "Backup-Type"

cpo_pgbackrest_list_backup:
    query: "WITH backups AS (
                SELECT jsonb_array_elements(data) AS stanza_data
                FROM exporter.pgbackrestbackupinfo
            )
            , per_stanza AS ( 
                SELECT stanza_data->>'name' AS stanza,
                jsonb_array_elements(stanza_data->'backup') AS backup_data
                FROM backups
            )
                SELECT stanza,
                backup_data->'database'->>'repo-key' as repo,
                backup_data->>'label' as name,
                backup_data->'info'->>'size' AS size,
                backup_data->'info'->'repository'->>'size' AS repo_size,
                backup_data->>'type' as type,
                CASE
                    WHEN backup_data->>'error'='false' THEN -1
                    ELSE -2
                 END 
                 AS bck_status
                FROM per_stanza
                WHERE backup_data->>'type' IN ('full', 'diff', 'incr')
                GROUP BY name,backup_data,stanza;"
    metrics:
        - stanza:
            usage: "LABEL"
            description: "Stanza"
        - repo:
            usage: "LABEL"
            description: "Reponame"
        - name:
            usage: "LABEL"
            description: "Starttime as Timestamp"
        - size:
            usage: "GAUGE"
            description: "Backup-Size"
        - repo_size:
            usage: "GAUGE"
            description: "Backup-Size on Repo"
        - type:
            usage: "LABEL"
            description: "Backup-Type"
        - bck_status:
            usage: "LABEL"
            description: "Backup-Status"

cpo_pgbackrest_time_since_last_backup:
    query: "WITH backups AS (
                SELECT jsonb_array_elements(data) AS stanza_data
                FROM exporter.pgbackrestbackupinfo
            ),
            per_stanza AS ( 
                SELECT stanza_data->>'name' AS stanza,
                 jsonb_array_elements(stanza_data->'backup') AS backup_data,
                 CASE
                    WHEN stanza_data->'status'->>'message'='ok' THEN 1
                    ELSE 0
                 END 
                 AS message
                FROM backups
            )
                SELECT stanza, extract(epoch from (CURRENT_TIMESTAMP - max(to_timestamp((backup_data->'timestamp'->>'stop')::bigint)))) AS time_since_last_backup_completion
                FROM per_stanza
                WHERE backup_data->>'type' IN ('full','diff','incr')
                GROUP BY stanza;"
    metrics:
        - stanza:
            usage: "LABEL"
            description: "Stanza"
        - time_since_last_backup_completion:
            usage: "GAUGE"
            description: "Seconds since last backup"